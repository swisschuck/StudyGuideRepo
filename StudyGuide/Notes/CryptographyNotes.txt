Security Concepts
=======================
+ Confidentiality - the process of making data completely unreadable.
+ Inegrity - maintainig consistancy and accuracy throughout its entire lifecycle.
+ Non-Repudiation - the assurance that someone cannot deny the authenticity of the signature of a document/data.
+ Authentication - using a cryptographic system we can establish the identity of a user or system.


Random Numbers
========================
+ Used for Generating encryption keys.
+ Software based random numbers ares not truly random.
+ Randomness can be created from human interaction.
+ Not practical for server applications.
+ Can use dedicated hardware or a specfically designed algorithm.
+ Microsoft recommends creating 1 instance of System.Random to generate numbers for your application. However System.Random is not thread safe, if your
  application calls methods on the random objects from multiple threads you must use synchronization objects to ensure that only one thread can access the
  random number generator at a time.
+ The RNGCryptoServiceProvider class is a more secure way to generate random numbers and is thread safe but it tends to be slower to execute.


Hashing Numbers
==========================
+ Hashing is a method of cryptography that converts any form of data into a unique string of text. Any piece of data can be hashed, no matter its size or type. 
  In traditional hashing, regardless of the data's size, type, or length, the hash that any data produces is always the same length.
+ Makes it easy to compute the hash value for any given message.
+ It is not possible to generate a message that has any given hash.
+ It is not possible to modify a message without changing the hash.
+ It is not possible to find two different messages with the same hash.
+ Hashing is a one way operation, meaning once a piece of data has been hashed it cannot be reversed, unlike encryption which is two way via a key.
+ Explained in General
	- Someone creates a message to send to another person, they create a hash of that message.
	- They then send the message and the hash to the person they intend.
	- The person getting the message uses the hash to check the message for validity and data loss.
	- If the Hash and data do not match then the sender or method used to send cannot be trusted.

+ Common Hashing Algorithms
	- MD 5: 
		- replaced MD4 in 1991.
		- Produces a 128 bit (16 byte) hash value.
		- Commonly used to verify file integrity.
		- First collision resistance flaw found in 1996, leading to people recommending moving over to the Secure Hash Family.
	- SHA-1 (Secure Hash Family): published by the National institute for standards and technology. A 160 bit Hash function which resembles the early MD5 algorithm.
	- SHA-2 (Secure Hash Family): a family of two similiar hash functions with different block sizes.
		- SHA 256 uses 256 bit words.
		- SHA 512 uses 512 bit words. 
	- SHA-3 (Secure Hash Family): hash function based on the Keccak algorithms. Which is based on SHA-2 but works very different but is not part of the .net framework.

+ Hashed Message Authentication Code (HMAC):
	- a method that combines one way hash function with a secret cryptographic key you get a HMAC.
	- used to verify the integrity and authenticity of a message.

+ Hashed Salt:
	- In cryptography, a salt is random data that is used as an additional input to a one-way function that "hashes" data, a password or passphrase. Salts are used 
	  to safeguard passwords in storage.
	- refers to adding random data to the input of a hash function to guarantee a unique output, the hash, even when the inputs are the same

+ Password Based Key Derivation Functions (PBKDF2)
	- is part of the Public Key Cryptographic Standards (PKC5 #5 Version 2.0) and Internet Engineering Task Force (RFC 2898) Specification
	- are key derivation functions with a sliding computational cost, aimed to reduce the vulnerability of encrypted keys to brute force attacks
	- a good default is 50,000 iterations.
	- you need to balance the number of iterations with acceptable performance.
	- its good practice to double the number of iterations every 2 years.

+ Symmetric Encryption
==========================
	- is a two way encryption operation that used the same key to encrypt and decrypt the message.
	- Pros
		- Extremely Secure
		- Relatively fast
	- Cons
		- Key Sharing can be tricky
		- lots of damage can be done if the key is compromised

	- Data Encryption Standard (DES) was developed in the early 1970's at IBM
		- Triple DES - after DES was cracked through some who gives a shit competition, triple DES was created. Triple DES involves applying DES
		  three times with 2 or 3 different keys. Its secure but its a bit slow.
		- DES is a block cipher that transforms plaintext into cyphertext.
		- DES uses a block size of 64 bits.
		- DES uses a 64 bit key bit only 56 bits are used by the the algorithm.
		- DES supports different modes of operation in .NET.
		- DES uses a key schedule for encryption, the generates subkeys for each of the 16 rounds.

	- Advanced Encryption Standard (AES) was adopted by NIST in 2001.
		- It was selected by yet another who gives a shit competition meant to replace DES.
		- AES is based on the Rijndael cipher.
		- uses 128 bit block size and 128, 192, or 256 bit keys.
		- based on a design known as substitution - permutation network
			- S-Box performs substitutions
			- P-Box performs bit shuffling to transpose bits across S-Box inputs
		- 10 rounds of repetition for 128-bit keys
		- 12 rounds of repetition for 192-bit keys
		- 14 rounds of repetition for 256-bit keys
		- Every key is expanded so a seperate sub-key can be utilized for every round
		- has yet to be compromised by brute force attacks

	- Initialization Vector:
		- used with AES, DES, and Triple DES.
		- is an arbitrary number that can be used along with a secret key for data encryption. 
		  This number, also called a nonce, is employed only one time in any session.
		- prevents repetition in data encryption, making it more difficult for a hacker using a dictionary attack to find patterns and break a cipher.

+ Asymmetric Encryption
==========================
	- is any cryptographic system that uses pairs of keys: 
		- public keys which may be disseminated widely
		- private keys which are known only to the owner. 
	  This accomplishes two functions: 
		- authentication, where the public key verifies that a holder of the paired private key sent the message.
		- encryption, where only the paired private key holder can decrypt the message encrypted with the public key.

	- Pros:
		- Sender and receiver dont need to share keys prior to message sending.
		- The Sender only needs the recipients public key.

	- Cons:
		- Asymmetric encryption is slow compared to symmetric encryption.
		- you can only encrypt data that is smaller than the size of the key.

	- RSA (Rivest, Shamir, and Adelman - the inventors of the technique)
		- was developed by RSA Security LLC
		- is the standard for industrial strength encryption.
		- is commonly used to encrypt symmetric encryption keys.
		- uses 1024, 2048, and 4096 bit keys
		- public and private keys are based on prime numbers





	
